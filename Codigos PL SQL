                                                                             //Sentencia Basica

DECLARE 

BEGIN

END;


                                                                              //Imprimir Datos

DECLARE 
    X NUMBER;
BEGIN
   X:=7;
   DBMS_OUTPUT.PUT_LINE('El valor de la variable es: '||X);
END;


                                                                            //Capturar por teclado

DECLARE 
    X NUMBER:=:variable; //Fuera del localhost cambiamos por X NUMBER:=&variable;
    
    -- Ejemplo de comentario
BEGIN
   DBMS_OUTPUT.PUT_LINE('El valor de la variable es: '||X);
END;


                                                                                  //Condicionales
                              IF(condicion)THEN
                               instrucciones
                              ELSIF(condicion)THEN
                               instrucciones
                              [ELSE]
                               instrucciones
                              END;
//////////////////////////////////
DECLARE 
    X NUMBER:=:X;
BEGIN
   IF(X>7)THEN
      DBMS_OUTPUT.PUT_LINE('El valor de la variable X es mayor de 7 y su valor es: '||X);
   ELSIF(x < 7) THEN
      DBMS_OUTPUT.PUT_LINE('El valor de la variable X es menor de 7 y su valor es: '||X);
   ELSE
      DBMS_OUTPUT.PUT_LINE('El valor de la variable X es: '||X);
   END IF;
END;


                                                                                    //Etiquetas

DECLARE 
    X NUMBER:=:X;
BEGIN
   IF(X>7)THEN
      GOTO proceso3;
   ELSIF(x < 7) THEN
      GOTO proceso2;
   ELSE
      GOTO proceso1;

   END IF;

<<proceso1>>
   DBMS_OUTPUT.PUT_LINE('Soy el proceso 1');
   GOTO FIN;                      --break
<<proceso2>>
   DBMS_OUTPUT.PUT_LINE('Soy el proceso 2');
<<proceso3>>
   DBMS_OUTPUT.PUT_LINE('Soy el proceso 3');

END;


                                                                          //LOOP = numeros del 1 al 10
                                                                                        
DECLARE
  X NUMBER:=1;
BEGIN
  LOOP
    dbms_output.put_line(X);
    x:=x+1;
    IF (x>10) THEN
      EXIT;
    END IF;
  END LOOP;
END;



                                                                              //WHILE = numeros del 3 al 11
                                                                              
DECLARE
  X NUMBER:=3;
BEGIN
  WHILE(x <= 11) LOOP
    dbms_output.put_line(X);
    x:=x+1;
  END LOOP;
END;

                                                                            //Los primeros N numeros pares

DECLARE
  X NUMBER:=1;
BEGIN
  WHILE(X <=:N) LOOP
    dbms_output.put_line(2*X);
    x:=x+1;
  END LOOP;
END;


                                                                                            //For 


BEGIN
  FOR X IN 1..:n LOOP
    dbms_output.put_line(2*X);
  END LOOP;
END;

                                                                                            //For en reversa

BEGIN
  FOR X IN REVERSE 1..:n LOOP
    dbms_output.put_line(2*X);
  END LOOP;
END;


                                                                          // Crear procedimientos Y/o funciones(ahorrar codigo)
                                                                          
CREATE OR REPLACE PROCEDURE print
  IS
  BEGIN
    dbms_output.put_line(3);
  END;
//////////////////////////////////////////////////
CREATE OR REPLACE FUNCTION print
  RETURN NUMBER
    IS
    BEGIN
      RETURN(3);
    END;
    
                                                                                     //Funcion Recursiva
    
CREATE OR REPLACE FUNCTION fn_fact(n number)
RETURN NUMBER
IS 
  BEGIN
    IF(n=0) THEN
      RETURN(1);
    ELSE
      RETURN n*fn_fact(n-1);
    END IF;
END;

                                                                                    //Fibonacci Recursivo

DECLARE
  num NUMBER:=:NUM;
BEGIN
  FOR I IN 1..num LOOP
    println(fn_fib(I));
  END LOOP;
END;

create or replace FUNCTION fn_fib(n number)
RETURN NUMBER
IS 
  BEGIN
    IF(n=0) THEN
      RETURN(0);
    ELSIF(N=1) THEN
      RETURN(1);
    ELSE
      RETURN(fn_fib(n-1)+fn_fib(n-2));
    END IF;
END;


                                                                               // Creacion de un Cursor

CREATE OR REPLACE PROCEDURE VXV
  IS
    CURSOR CURSOR_VXV
      IS
        SELECT
          nom_vendedor as nombre, sum(val_factura) ventas
        FROM
          vendedor, cliente, factura
        WHERE
          vendedor.cod_vendedor = cliente.cod_vendedor AND 
          cliente.cod_cliente = factura.cod_cliente
            group by rollup(nom_vendedor);            
        REGISTRO CURSOR_VXV%ROWTYPE;

BEGIN
  OPEN CURSOR_VXV;
  LOOP
    FETCH CURSOR_VXV INTO REGISTRO;
    EXIT WHEN CURSOR_VXV%NOTFOUND;
    print(REGISTRO.nombre||'-->'||REGISTRO.ventas);
  END LOOP;
  CLOSE CURSOR_VXV;
END;
 // Ejecucion
BEGIN
  VXV;
END;

                                                                              //Cursor con FOR

CREATE OR REPLACE PROCEDURE VXCLIF
  IS
    CURSOR CURSOR_VXCLIF
      IS
        SELECT
          nom_cliente as nombre_cliente, sum(val_factura) as ventas
        FROM
          CLIENTE, FACTURA
        WHERE
          CLIENTE.cod_cliente = FACTURA.cod_cliente
            group by rollup(nom_cliente);

BEGIN
FOR REGISTRO IN CURSOR_VXCLIF LOOP
  print(REGISTRO.nombre_cliente||'----->'||REGISTRO.ventas);
END LOOP;
END;

BEGIN
  VXCLIF;
END;

                                                                                    //Cursor con WHILE

CREATE OR REPLACE PROCEDURE VXC
  IS
    CURSOR CURSOR_VXC
      IS
        SELECT
          nom_ciudad as nombre_ciudad, sum(val_factura) as ventas
        FROM
          CIUDAD, CLIENTE, FACTURA
        WHERE
          CIUDAD.cod_ciudad = CLIENTE.cod_ciudad AND
          CLIENTE.cod_cliente = FACTURA.cod_cliente
            group by rollup(nom_ciudad);

  REGISTRO CURSOR_VXC%ROWTYPE;
BEGIN
  OPEN CURSOR_VXC;
  FETCH CURSOR_VXC INTO REGISTRO;
  WHILE(CURSOR_VXC%FOUND) LOOP
    print(REGISTRO.nombre_ciudad||'----->'||REGISTRO.ventas);
  FETCH CURSOR_VXC INTO REGISTRO;
END LOOP;
CLOSE CURSOR_VXC;
END;

BEGIN
  VXC;
END;

                                                                                      //Creacion de paquetes
CREATE OR REPLACE PACKAGE paquetico
IS
PROCEDURE imprimir(cadena varchar);

END paquetico;

                                                                                        //Ejemplo paquete
create or replace PACKAGE pre_parcial
  IS
     PROCEDURE cCredXFac;
     PROCEDURE ProgXMat(prog_dado number);

     FUNCTION CredXEdado(estudiante_dado number)
       RETURN VARCHAR;
END pre_parcial;​



create or replace PACKAGE BODY pre_parcial
    IS
PROCEDURE cCredXFac
  IS
    CURSOR CURSOR_cCredXFac
      IS
        SELECT
          nom_facultad as nombre_f, sum(can_creditos) creditos
        FROM
          FACULTAD, PROGRAMA, ESTUDIANTE, REGISTRO, MATERIA
        WHERE
          FACULTAD.cod_facultad = PROGRAMA.cod_facultad AND
          PROGRAMA.cod_programa = ESTUDIANTE.cod_programa AND
          ESTUDIANTE.cod_estudiante = REGISTRO.cod_estudiante AND
          REGISTRO.cod_materia = MATERIA.cod_materia
            group by rollup(nom_facultad);   

        REGISTRO CURSOR_cCredXFac%ROWTYPE;
BEGIN
   OPEN CURSOR_cCredXFac;
   FETCH CURSOR_cCredXFac INTO REGISTRO;
   WHILE(CURSOR_cCredXFac%FOUND) LOOP
    print(REGISTRO.nombre_f||'--->'||REGISTRO.creditos);
    FETCH CURSOR_cCredXFac INTO REGISTRO;
   END LOOP;
   CLOSE CURSOR_cCredXFac;
END;

PROCEDURE ProgXMat(prog_dado number)
  IS
    CURSOR CURSOR_ProgXMat
      IS
        SELECT
          nom_programa as nombre_prog, nom_materia as nombre_mat
        FROM
          PROGRAMA, ESTUDIANTE, REGISTRO, MATERIA
        WHERE
          PROGRAMA.cod_programa = ESTUDIANTE.cod_programa AND
          ESTUDIANTE.cod_estudiante = REGISTRO.cod_estudiante AND
          REGISTRO.cod_materia = MATERIA.cod_materia AND
          PROGRAMA.cod_programa = prog_dado
            group by(nom_programa, nom_materia);   

        REGISTRO CURSOR_ProgXMat%ROWTYPE;
BEGIN
   OPEN CURSOR_ProgXMat;
   FETCH CURSOR_ProgXMat INTO REGISTRO;
   WHILE(CURSOR_ProgXMat%FOUND) LOOP
    print(REGISTRO.nombre_prog||' ---> '||REGISTRO.nombre_mat);
    FETCH CURSOR_ProgXMat INTO REGISTRO;
   END LOOP;
   CLOSE CURSOR_ProgXMat;
END;

FUNCTION CredXEdado(estudiante_dado number)
    RETURN VARCHAR
      IS
        nombre_estudiante ESTUDIANTE.nom_estudiante%type;
        creditos MATERIA.can_creditos%type;
      BEGIN
          SELECT
            nom_estudiante, sum(can_creditos) INTO nombre_estudiante, creditos
          FROM
            ESTUDIANTE, REGISTRO, MATERIA
          WHERE
            ESTUDIANTE.cod_estudiante = REGISTRO.cod_estudiante AND
            REGISTRO.cod_materia = MATERIA.cod_materia AND
            ESTUDIANTE.cod_estudiante = estudiante_dado
              group by (nom_estudiante);
          RETURN (nombre_estudiante||'--->'||creditos);
      END;

END pre_parcial;​
